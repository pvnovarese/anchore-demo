name: Demo Setup

on:
  ### UNCOMMENT THIS SECTION TO AUTOBUILD ON ANY PUSH
  #push:
  #  branches:
  #    - main
  ### UNCOMMENT THIS SECTION TO BUILD ON A REGULAR SCHEDULE
  #schedule:
  #  - cron: '38 23 */14 * *'
  ### UNCOMMENT THIS SECTION TO ENABLE ON-DEMAND BUILDS
  workflow_dispatch:
    inputs:
      mode:
        description: 'On-Demand Demo Setup'  
        
env:
  ANCHORECTL_URL: ${{ vars.ANCHORECTL_URL }}
  ANCHORECTL_USERNAME: ${{ vars.ANCHORECTL_USERNAME }}
  ANCHORECTL_PASSWORD: ${{ secrets.ANCHORECTL_PASSWORD }}
  ## set ANCHORECTL_FAIL_BASED_ON_RESULTS to true if you want to break the pipeline based on the evaluation
  ANCHORECTL_FAIL_BASED_ON_RESULTS: false      
  # if $APPLICATION does not exist, create it with:
  # anchorectl application add ${APPLICATION}
  APPLICATION: ${{ github.event.repository.name }}
  REGISTRY: ghcr.io
  # if $VERSION does not exist, create it with:
  # anchorectl application version add ${APPLICATION}@${VERSION}

     
jobs:

  Source:
    runs-on: ubuntu-latest
    steps:
    
    - name: "Set variables"
      run: |
        echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV
        echo "VERSION=$(date +%Y-%m-%d).${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Install Anchore CLI Tools
      run: |
        curl -sSfL https://anchorectl-releases.anchore.io/anchorectl/install.sh | sh -s -- -b ${HOME}/.local/bin v5.3.0
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b ${HOME}/.local/bin v0.105.0
        export PATH="${HOME}/.local/bin/:${PATH}"
        
    - name: Verify Anchore Ready and Reachable
      run: |
        anchorectl version
        anchorectl system status 
        
    - name: Generate SBOM and Push to Anchore Enterprise
      run: |
        syft -o syft-json . | anchorectl source add --wait ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}@${GITHUB_SHA:0:7} --application ${APPLICATION}@${VERSION} --from -
        
    - name: Pull Vulnerability List
      run: |
        anchorectl source vulnerabilities ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}@${GITHUB_SHA:0:7} 

  Baseline-Build:
    runs-on: ubuntu-latest
    steps:
    
    - name: "Set IMAGE environmental variables"
      run: |
        echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to the container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}      
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build local container
      uses: docker/build-push-action@v5
      with:
        tags: ${{ env.IMAGE }}
        file: Dockerfile-baseline
        push: true
        load: false

  Baseline-Scan:
    runs-on: ubuntu-latest
    needs: Baseline-Build
    steps:
    
    - name: "Set IMAGE environmental variables"
      run: |
        echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV
        
    - name: Checkout code
      ### only need to do this if you want to pass the dockerfile to Anchore during scanning
      uses: actions/checkout@v4
        
    - name: Install latest anchorectl binary
      run: |
        curl -sSfL https://anchorectl-releases.anchore.io/anchorectl/install.sh | sh -s -- -b ${HOME}/.local/bin v5.3.0
        export PATH="${HOME}/.local/bin/:${PATH}"
                    
    - name: Generate SBOM and push to Anchore
      run: |        
        anchorectl image add --no-auto-subscribe --wait --dockerfile Dockerfile --force --annotation build_tool=github --annotation scan_type=centralized --annotation build=baseline ${IMAGE}
                
  Final-Build:
    runs-on: ubuntu-latest
    needs: Baseline-Scan
    steps:
    
    - name: "Set IMAGE environmental variables"
      run: |
        echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to the container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}      
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build local container
      uses: docker/build-push-action@v5
      with:
        tags: ${{ env.IMAGE }}
        file: Dockerfile
        push: true
        load: false

  Final-Scan:
    runs-on: ubuntu-latest
    needs: Final-Build
    steps:
    
    - name: "Set IMAGE environmental variables"
      run: |
        echo "IMAGE=${REGISTRY}/${GITHUB_REPOSITORY}:${GITHUB_REF_NAME}" >> $GITHUB_ENV
        echo "VERSION=$(date +%Y-%m-%d).${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        
    - name: Checkout code
      ### only need to do this if you want to pass the dockerfile to Anchore during scanning
      uses: actions/checkout@v4
        
    - name: Install latest anchorectl binary
      run: |
        curl -sSfL https://anchorectl-releases.anchore.io/anchorectl/install.sh | sh -s -- -b ${HOME}/.local/bin v5.3.0
        export PATH="${HOME}/.local/bin/:${PATH}"
                    
    - name: Generate SBOM and push to Anchore
      run: |        
        anchorectl image add --no-auto-subscribe --wait --dockerfile Dockerfile --force --annotation build_tool=github --annotation scan_type=centralized --annotation build=final --application ${APPLICATION}@${VERSION} ${IMAGE}

    - name: Pull Vulnerability List
      run: |
        anchorectl image vulnerabilities ${IMAGE} 
        
    - name: Pull Policy Evaluation
      run: |
        # set "ANCHORECTL_FAIL_BASED_ON_RESULTS=true" (see above in the "env:" section) to break the pipeline here if the 
        # policy evaluation returns FAIL or add -f, --fail-based-on-results to this command for the same result
        #
        anchorectl image check --detail ${IMAGE}
